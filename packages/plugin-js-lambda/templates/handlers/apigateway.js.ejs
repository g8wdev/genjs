<% var parseRoute = (k, v) => {
    v = {route: k, private: false, config: {}, options: {}, handler: 'unknown', method: k.split(' ').shift().toUpperCase(), ...('string' === typeof v ? {handler: v} : v)};
    if (!v.code || ((v.code < 200) || (v.code >= 600))) {
        switch (v.method) {
            case 'GET': v.code = 200; break;
            case 'POST': v.code = 201; break;
            case 'DELETE': v.code = 204; break;
            case 'PUT': v.code = 200; break;
            case 'OPTIONS': v.code = 204; break;
            default: v.code = 200; break;
        }
    }
    if ('<private>' === v.handler.slice(0, '<private>'.length)) {
        v.handler = v.handler.slice('<private>'.length);
        v.private = true;
    }
    if (false !== v.private) v.options.private = v.private;
    delete v.private;
    if (0 === Object.keys(v.config).length) delete v.config;
    if (0 === Object.keys(v.options).length) delete v.options;
    return v;
} -%>
<% var len = Object.keys(routes).reduce((acc, r) => r.length > acc ? r.length : acc, 0); -%>
const fnm = async (a, b) => {
    switch (`${a.method} ${a.path}`) {
<% var sortedRoutes = Object.entries(routes).map(([k, v]) => parseRoute(k, v)) -%>
<% sortedRoutes.sort((a, b) => a.route > b.route ? 1 : (a.route < b.route ? -1 : 0)) -%>
<% sortedRoutes.forEach(r => { -%>
        case '<%- r.route -%>': <%- ''.padStart(len - r.route.length, ' ') %>return r(a, b, <%- r.code -%>, '<%- r.handler -%>'<% if (r.options || r.config) { %>, <%- JSON.stringify(r.options) -%><% if (r.config) { %>, <%- JSON.stringify(r.config) -%><% } %><% } %>);
<% }) -%>
        default: <%- ''.padStart(len - 'default'.length + 7, ' ') %>return r(a, b, 404, undefined);
    }
};

<% var middlewares = ['@apigateway'] -%>
<% var errorMiddlewares = ['@generic'] -%>
<% var middlewaresConfigs = {} -%>
<% var errorMiddlewaresConfigs = {} -%>
<% var errorConfig = ((('undefined' !== typeof errors) && errors) ? errors : undefined) || {} -%>
<% Object.keys(errorConfig).length && (errorMiddlewaresConfigs['@generic'] = {mapping: errorConfig}) -%>
<% 'undefined' !== typeof jwt && jwt && middlewares.push('@jwt') -%>
<% 'undefined' !== typeof cors && cors && middlewares.push('@cors') -%>
<% middlewares.push(':fnm') -%>
<%- pre_init({middlewares, errorMiddlewares, middlewaresConfigs, errorMiddlewaresConfigs}) %>

<%- post_init({fn: false}) %>

const r = async (a, b, c, n, o = {}, p = {}) => {
    if (!n) { const e = new Error('Not Found'); e.code = c; throw e; }
    return Object.assign(b, await require(`.<%- ('undefined' === typeof operationDirectory) ? '' : `/${operationDirectory}` -%>/<%- 'undefined' !== typeof prefix ? `${prefix}_` : '' -%>${n}`).handler(
        {...a, bodyOnly: false, params: {...(a.params || {}), ...p}, private: o.private},
        {...a.context}
    ));
};