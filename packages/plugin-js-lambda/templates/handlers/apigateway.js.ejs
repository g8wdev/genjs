<% var parseRoute = (k, v) => {
    v = {private: false, config: {}, options: {}, handler: 'unknown', method: k.split(' ').shift().toUpperCase(), ...('string' === typeof v ? {handler: v} : v)};
    if (!v.code || ((v.code < 200) || (v.code >= 600))) {
        switch (v.method) {
            case 'GET': v.code = 200; break;
            case 'POST': v.code = 201; break;
            case 'DELETE': v.code = 204; break;
            case 'PUT': v.code = 200; break;
            default: v.code = 200; break;
        }
    }
    if ('<private>' === v.handler.slice(0, '<private>'.length)) {
        v.handler = v.handler.slice('<private>'.length);
        v.private = true;
    }
    if (false !== v.private) v.options.private = v.private;
    delete v.private;
    if (0 === Object.keys(v.config).length) delete v.config;
    if (0 === Object.keys(v.options).length) delete v.options;
    return v;
} -%>
// noinspection JSUnusedLocalSymbols
<%- pre_init %>
const <%- fnName -%> = async () => { throw Object.assign(new Error('Not Found'), {code: 404}); };
<%- post_init %>
<% var len = Object.keys(routes).reduce((acc, r) => r.length > acc ? r.length : acc, 0); -%>
module.exports = {
    handler: async (event = {}, context = {}) => {
        let h;
        switch (`${event.httpMethod} ${event.resource}`) {
<% Object.entries(routes).forEach(([k, v]) => { -%>
<% var r = parseRoute(k, v) -%>
            case '<%- k -%>': <%- ''.padStart(len - k.length, ' ') %>h = r(<%- r.code -%>, '<%- r.handler -%>'<% if (r.options || r.config) { %>, <%- JSON.stringify(r.options) -%><% if (r.config) { %>, <%- JSON.stringify(r.config) -%><% } %><% } %>); break;
<% }) -%>
            default: h = hn; break;
        }
        return h(event, context);
    },
};

// helpers
const r = (code, name, options = {}, forcedParams = {}) => async (event = {}, context = {}) => {
    let response = {statusCode: code, body: '{}'};
    try {
<% if (('undefined' !== typeof jwt) && jwt) { -%>
        event.headers && event.headers.Authorization && (event.user = require('jsonwebtoken').verify(
            event.headers.Authorization.split(' ')[1],
            String(process.env.JWT_SECRET || 'the-very-secret-secret')
        ));
<% } -%>
        if (options.private && !event.user) {
            const e = new Error('Unauthorized'); e.code = 401;
            // noinspection ExceptionCaughtLocallyJS
            throw e;
        }
        response.body = JSON.stringify(await require(`.<%- ('undefined' === typeof operationDirectory) ? '' : `/${operationDirectory}` -%>/<%- 'undefined' !== typeof prefix ? `${prefix}_` : '' -%>${name}`).handler({
            user: event.user || undefined,
            params: {
                ...JSON.parse(event.body || '{}'),
                ...(event['queryStringParameters'] || {}),
                ...(event['pathParameters'] || {}),
                ...forcedParams,
            },
        }, {...context}));
    } catch (e) {
<% var errorConfig = Object.entries(((('undefined' !== typeof errors) && errors) ? errors : undefined) || {}) -%>
<% if (errorConfig.length) { -%>
        response.statusCode = ('number' === typeof e.code) ? e.code : 500;
        response.body = JSON.stringify(e.serialize ? e.serialize(): e.message);
        switch (response.statusCode) {
<% var len2 = errorConfig.reduce((acc, r) => `${r[0]}`.length > acc ? `${r[0]}`.length : acc, 0); -%>
<% errorConfig.sort((a, b) => a[0] < b[0] ? -1 : (a[0] > b[0] ? 1 : 0)) -%>
<% errorConfig.forEach(([k, v]) => { -%>
            case <%- k -%>: <%- ''.padStart(len2 - `${k}`.length, ' ') %>response = {statusCode: <%- JSON.stringify(v.code) -%>, body: <%- JSON.stringify(v.message) -%>}; break;
<% }) -%>
        }
<% } else { -%>
        response.statusCode = ('number' === typeof e.code) ? e.code : 500;
        response.body = JSON.stringify(e.serialize ? e.serialize(): e.message);
<% } -%>
    }
    return response;
};
