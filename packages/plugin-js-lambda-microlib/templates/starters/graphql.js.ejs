const AWS = require('aws-sdk');
const {ApolloServer, gql} = require('apollo-server');
<% if ('undefined' !== typeof selections) { -%>
const {select} = require('@ohoareau/apollo-graphql-selections');
<% } else { -%>
function extractRootSelectedFieldsFromInfo(info) {
    if (!info) return [];
    if ('Page' === `${info.returnType}`.slice(-4)) {
        return (((((((((info.operation || {}).selectionSet || {}).selections || [])[0] || {}).selectionSet || {}).selections || [])[0] || {}).selectionSet || {}).selections || []).filter(x => x.kind === 'Field' && ('__typename' !== (x.name || {}).value)).map(s => s.name.value);
    }
    return info.operation.selectionSet.selections[0].selectionSet.selections.filter(x => x.kind === 'Field').map(s => s.name.value);
}
<% } -%>

const r = n => {
    return async (parent, params = {}, {event, context, throwError = false}, info) => {
        const handlerEvent = {params};
        handlerEvent.params = handlerEvent.params || {};
<% if ('undefined' !== typeof selections) { -%>
        const {fields = [], selections = {}} = select(info);
        handlerEvent.params.selections = selections;
        handlerEvent.params.fields = handlerEvent.params.fields || fields;
<% } else { -%>
        handlerEvent.params.fields = handlerEvent.params.fields || extractRootSelectedFieldsFromInfo(info);
<% } -%>
        (!!event && !!event.user) && (handlerEvent.user = event.user);
        !!parent && (handlerEvent.params.parent = parent);
        return require(`.<%- ('undefined' === typeof operationDirectory) ? '' : `/${operationDirectory}` -%>/${n}`).handler(handlerEvent, {...context, info, throwError});
    };
};
const jwtSecret = String(process.env.JWT_SECRET || 'the-very-secret-secret');

<% if ('undefined' !== typeof schemaFile) { -%>
<%= ('undefined' === typeof schemaExtensions) ? 'const' : 'let' %> typeDefs = [gql(require('fs').readFileSync(`${__dirname}/<%- schemaFile -%>`, 'utf8'))];
<% } else { -%>
<%= ('undefined' === typeof schemaExtensions) ? 'const' : 'let' %> typeDefs = [gql`
<%- 'undefined' !== typeof schema ? schema : '' -%>
`];
<% } -%>

const resolvers = {
<% Object.entries((('undefined' !== typeof resolvers) ? resolvers : undefined) || {}).forEach(([typeName, queries]) => { -%>
    <%- typeName -%>: {
<% Object.entries(queries).forEach(([k, v]) => { -%>
        <%- k -%>: r('<%- v -%>'),
<% }) -%>
    },
<% }) -%>
};

<%= ('undefined' === typeof schemaExtensions) ? 'const' : 'let' %> context = ({event, context, req}) => {
    const headers = (event || {}).headers || req.headers;
    if (!!headers) {
        event = event || {};
        const authHeader = headers.Authorization || headers.authorization;
        if (!!authHeader) {
            event.user = require('jsonwebtoken').verify((authHeader || '').split(' ')[1], jwtSecret);
        }
    }
    return {event, context, throwError: true};
};
<% if (('undefined' !== typeof schemaExtensions) && (0 < schemaExtensions.length)) { -%>
<% schemaExtensions.forEach((se, ii) => {
function convertSchemaExtension(se) {
    if ('string' === typeof se) se = {type: se};
    se = {config: {}, ...se};
    se['require'] = ('@' === se.type.slice(0, 1)) ? (-1 === se.type.indexOf('/') ? se.type.slice(1) : se.type) : `../schema-extensions/${se.type}.js`;
    return se;
}
const _se = convertSchemaExtension(se); -%>
const se<%= ii + 1 -%> = require('<%= _se.require -%>');
<% if (_se['config']['scalar'] !== false) { %>se<%= ii + 1 -%>['typeDefs'] && (typeDefs = [...se<%= ii + 1 -%>['typeDefs'], ...typeDefs]); <% } -%>
se<%= ii + 1 -%>['resolvers'] && Object.assign(resolvers, se<%= ii + 1 -%>['resolvers']);
se<%= ii + 1 -%>['contextFactory'] && (context = se<%= ii + 1 -%>['contextFactory'](context));
<% }) -%>
<% } -%>

const server = new ApolloServer({typeDefs, resolvers, context});

server.listen(process.env.PORT ? {port: process.env.PORT} : {}).then(({ url }) => {
    console.log(`ðŸš€ GraphQL Server ready at ${url} (AWS region is ${AWS.config.region})`);
});