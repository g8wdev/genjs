# JS Development to be integration in HTML/JS app

We develop autonomous JS components in a separate repository called `libs-js`.
We then release those components by publishing them to a private NPM registry.

To use our components (or other Open Source components) inside the HTML/JS application, we need to create a wrapping autonomous JS file in the [IIFE format](https://en.wikipedia.org/wiki/Immediately_invoked_function_expression).
The source code of these wrapping component is located in `./packages/`.
One file is created, at least, per directory present in the `./packages`, and can be used directly inside the HTML code (using `<script src=...>` tag) of the HTML/JS application.
To package such a production-ready minified file, we use a tool called [Rollup](https://rollupjs.org/).
We have prepared a list of `make` targets to easier the process a building the component IIFE file.

### Create a JS component wrapper

1. Create a new directory (ex: `my-awesome-component`) in `./packages/`.
2. Create the `package.json` file for the wrapper

    ```json
    {
      "name": "@<%- npm_scope -%>/my-awesome-component",
      "version": "0.0.0",
      "license": "ISC",
      "scripts": {
        "build": "../../node_modules/.bin/rollup -c ../../rollup.config.js"
      },
      "dependencies": {
        "@<%- npm_scope -%>/react-<the-name-of-the-component-used>": "^0.1.0",
        "@<%- npm_scope -%>/react-async": "^0.1.0",
        "react": "^16.13.1",
        "react-dom": "^16.13.1",
        "@material-ui/core": "^4.9.10",
        "@material-ui/icons": "^4.9.1"
      }
    }
    ```

3. Create the `index.jsx` source file (wrapper file)

    ```jsx
    import React from 'react';
    import ReactDOM from 'react-dom';
    import X from '@<%- npm_scope -%>/react-<the-name-of-the-component-used>';
    import Block from '@<%- npm_scope -%>/react-async';
    
    // noinspection JSUnresolvedVariable
    const id = window.<%- npm_scope -%>_my_awesome_component_id
    // noinspection JSUnresolvedVariable
    const data = window.<%- npm_scope -%>_my_awesome_component_data;
    
    // noinspection JSUnresolvedVariable
    ReactDOM.render(
        <Block component={X} {...data} />,
        document.getElementById(id)
    );
    ```

4. Install dependencies (see below)
5. Build production-ready IIFE file (see below)
6. Add the following in your HTML/JS file:

    ```html
   <div id="component-some-unique-id">
       <script type="text/javascript">
           var <%- npm_scope -%>_my_awesome_component_id = 'component-some-unique-id';
           var <%- npm_scope -%>_my_awesome_component_data = {your: 'data', here: true};
       </script>
   </div>
   <link rel="stylesheet" href="//this/is/where/the/generated/minified/file/reside.min.css" />
   <script type="text/javascript" src="//this/is/where/the/generated/minified/file/reside.min.js"></script>
    ```

7. Enjoy using ReactJS components in our app!

### Install JS dependencies for React components

    make

This command will install JS dependencies in each of the directories in `./packages`, using [LernaJS](https://lerna.js.org/) and [Yarn](https://yarnpkg.com/).

### Build JS production-ready minified file

    make build

The built files are located in the `./build` directory (and must be versioned using Git!).